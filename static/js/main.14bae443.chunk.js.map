{"version":3,"sources":["algs.js","MainUI.jsx","App.js","serviceWorker.js","index.js"],"names":["keyEndsInId","name","match","noInnerObjects","obj","Object","keys","reader","React","useState","stateList","setStateList","stateFile","setStateFile","processing","setProcessing","readFile","result","type","onChange","e","file","target","files","FileReader","onloadend","readAsText","onClick","list","XmlJs","parseString","err","parsed","console","log","findDuplicates","node","parentPath","level","element","Array","vals","key","path","includes","push","val","isArr","index","arrayElement","Algs","Ableton","map","i","App","MainUI","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kTAAA,SAASA,EAAYC,GACjB,OAAOA,EAAKC,MAAM,QAGtB,SAASC,EAAeC,GACpB,cAAkBC,OAAOC,KAAKF,GAA9B,eAAoC,CAChC,GAAIA,EADM,gBACcC,OACpB,OAAO,EAIf,OAAO,ECNI,iBACX,IAAIE,EADa,EAGiBC,IAAMC,SAAS,IAHhC,mBAGVC,EAHU,KAGCC,EAHD,OAIiBH,IAAMC,WAJvB,mBAIVG,EAJU,KAICC,EAJD,OAKmBL,IAAMC,UAAS,GALlC,mBAKVK,EALU,KAKEC,EALF,KAOXC,EAAW,WACbH,EAAaN,EAAOU,SAwBxB,OAAO,6BACH,yDACA,wGAGA,4BACI,mGACA,uFACA,wFACA,gLAIA,8GACmF,6BAC/E,4CACA,wFAGA,0GAGR,wDACA,2BAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OA5CfC,EA4C+BD,EAAEE,OAAOC,MAAM,IA3C5DhB,EAAS,IAAIiB,YACNC,UAAYT,OACnBT,EAAOmB,WAAWL,GAHL,IAACA,KA8Cd,4BAAQM,QAxCQ,WAChB,IAAMC,EAAO,GACbC,IAAMC,YAAYlB,GAAW,SAACmB,EAAKC,GAC3BD,EACAE,QAAQC,IAAIH,IAGhBhB,GAAc,GDdnB,SAASoB,EAAeC,EAAMC,EAAYC,EAAOV,GACpD,IAAeW,EAGf,IAHeA,EAGLH,aAHqC/B,UAAakC,aAAmBC,OAM3E,IAFA,IAAMC,EAAO,GAEb,MAAkBpC,OAAOC,KAAK8B,GAA9B,eAAqC,CAAhC,IAAMM,EAAG,KACJC,EAAON,EAAa,MAAQK,EAE9BD,EAAKG,SAASR,EAAKM,KAAS1C,EAAY0C,GACxCd,EAAKiB,KAAK,CAACF,OAAMG,IAAKV,EAAKM,KAE3BD,EAAKI,KAAKT,EAAKM,IAGnBP,EAAeC,EAAKM,GAAMC,EAAML,EAAM,EAAGV,QAE1C,GAhBO,SAACW,GAAD,OAAcA,aAAmBlC,QAAYkC,aAAmBC,MAgBnEO,CAAMX,GAAO,CACpB,IAAMK,EAAO,GAEb,IAAK,IAAMO,KAASZ,EAAM,CACtB,IAAMa,EAAeb,EAAKY,GAE1B,GAAI7C,EAAe8C,GACf,cAAkB5C,OAAOC,KAAK2C,GAA9B,eAA6C,CAAxC,IAAMP,EAAG,KACJC,EAAON,EAAa,MAAQK,EAE9BD,EAAKG,SAASK,EAAaP,KAAS1C,EAAY0C,GAChDd,EAAKiB,KAAK,CAACF,OAAMG,IAAKG,EAAaP,KAEnCD,EAAKI,KAAKI,EAAaP,SAI/BP,EAAeC,EAAKY,GAAN,UAAiBX,EAAjB,YAA+BW,EAA/B,KAAyCV,EAAM,EAAGV,KCpBpEsB,CAAoBlB,EAAOmB,QAAS,UAAW,EAAGvB,GAElDjB,EAAaiB,GACbb,GAAc,SA6BlB,YAEA,iCACKD,EAAa,8CAA2B,KACzC,+BACI,+BACI,4BAAI,oCAAa,uCAErB,+BAEIJ,EAAU0C,KAAI,SAAChC,EAAGiC,GAAJ,OAAU,wBAAIX,IAAKW,GAC7B,4BAAKjC,EAAEuB,MACP,4BAAKvB,EAAE0B,cClEhBQ,MAJf,WACE,OAAO,kBAACC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzD,MACvB,2DCZN0D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.14bae443.chunk.js","sourcesContent":["function keyEndsInId(name) {\r\n    return name.match(/id$/i)\r\n}\r\n\r\nfunction noInnerObjects(obj) {\r\n    for (const key of Object.keys(obj)) {\r\n        if (obj[key] instanceof Object) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n//TODO: return list concatenations rather than in-place push\r\nexport function findDuplicates(node, parentPath, level, list) {\r\n    const isObj = (element) => (element instanceof Object) && !(element instanceof Array)\r\n    const isArr = (element) => (element instanceof Object) && (element instanceof Array)\r\n\r\n    if (isObj(node)) {\r\n        const vals = []\r\n\r\n        for (const key of Object.keys(node)) {\r\n            const path = parentPath + \" > \" + key\r\n\r\n            if (vals.includes(node[key]) && keyEndsInId(key)) {\r\n                list.push({path, val: node[key]})\r\n            } else {\r\n                vals.push(node[key])\r\n            }\r\n\r\n            findDuplicates(node[key], path, level+1, list)\r\n        }\r\n    } else if (isArr(node)) {\r\n        const vals = []\r\n\r\n        for (const index in node) {\r\n            const arrayElement = node[index]\r\n            \r\n            if (noInnerObjects(arrayElement)) {\r\n                for (const key of Object.keys(arrayElement)) {\r\n                    const path = parentPath + \" > \" + key\r\n\r\n                    if (vals.includes(arrayElement[key]) && keyEndsInId(key)) {\r\n                        list.push({path, val: arrayElement[key]})\r\n                    } else {\r\n                        vals.push(arrayElement[key])\r\n                    }\r\n                }\r\n            } else {\r\n                findDuplicates(node[index], `${parentPath}[${index}]`, level+1, list)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport XmlJs from 'xml2js'\r\n\r\nimport * as Algs from './algs'\r\n\r\nexport default () => {\r\n    let reader\r\n    \r\n    const [stateList, setStateList] = React.useState([])\r\n    const [stateFile, setStateFile] = React.useState()\r\n    const [processing, setProcessing] = React.useState(false)\r\n    \r\n    const readFile = () => {\r\n        setStateFile(reader.result)\r\n    }\r\n\r\n    const loadFile = (file) => {\r\n        reader = new FileReader()\r\n        reader.onloadend = readFile\r\n        reader.readAsText(file)\r\n    }\r\n\r\n    const processFile = () => {\r\n        const list = []\r\n        XmlJs.parseString(stateFile, (err, parsed) => {\r\n            if (err) {\r\n                console.log(err)\r\n                return\r\n            }\r\n            setProcessing(true)\r\n            Algs.findDuplicates(parsed.Ableton, \"Ableton\", 0, list)\r\n            //TODO: find a better way to render this list from the algorithm itself\r\n            setStateList(list)\r\n            setProcessing(false)\r\n        });\r\n    }\r\n    \r\n    return <div>\r\n        <h1>Ableton Corrupted Ids Fix</h1>\r\n        <p>\r\n            To get started using this tool, you will need to do some tasks beforehand\r\n        </p>\r\n        <ol>\r\n            <li>Make a copy of .als file and rename it, appending \".zip\" to the end</li>\r\n            <li>Unzip the new .zip file to get an uncompressed ALS file</li>\r\n            <li>This is actually an XML file now, so upload the XML here</li>\r\n            <li>\r\n                Once you click \"Get List\", you will see a list of all the keys in your XML where there \r\n                are duplicate nodes that have their keys ending with \"id\"\r\n            </li>\r\n            <li>\r\n                Use the error message from Ableton to help find the right duplicates to remove <br/>\r\n                <em>for example:</em>\r\n                <pre>\r\n                    The document \"______\" is corrupt. (Non-unique Note ids)\r\n                </pre>\r\n                <em>This means that you should look for keys with duplicate \"Note Id\" values</em>\r\n            </li>\r\n        </ol>\r\n        <div>Import your project XML</div>\r\n        <input type=\"file\" onChange={(e) => loadFile(e.target.files[0])}/>\r\n\r\n        <button onClick={processFile}>Get List</button>\r\n        \r\n        <section>\r\n            {processing ? <div>processing...</div> : null}\r\n            <table>\r\n                <thead>\r\n                    <tr><td>PATH</td><td>VALUE</td></tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    stateList.map((e, i) => <tr key={i}>\r\n                        <td>{e.path}</td>\r\n                        <td>{e.val}</td>\r\n                    </tr>)\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    </div>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport MainUI from './MainUI.jsx'\r\n\r\nfunction App() {\r\n  return <MainUI />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}