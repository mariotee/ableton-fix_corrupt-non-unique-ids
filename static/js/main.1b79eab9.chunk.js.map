{"version":3,"sources":["algs.js","MainUI.jsx","App.js","serviceWorker.js","index.js"],"names":["keyEndsInId","name","match","noInnerObjects","obj","Object","keys","props","reader","React","useState","stateList","setStateList","stateFile","setStateFile","processing","setProcessing","readFile","result","type","onChange","e","file","target","files","FileReader","onloadend","readAsText","onClick","XmlJs","parseString","err","parsed","console","log","findDuplicates","node","parentPath","level","list","element","Array","vals","key","path","includes","push","val","isArr","index","arrayElement","Algs","Ableton","map","i","App","MainUI","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0TAAA,SAASA,EAAYC,GACjB,OAAOA,EAAKC,MAAM,QAGtB,SAASC,EAAeC,GACpB,cAAkBC,OAAOC,KAAKF,GAA9B,eAAoC,CAChC,GAAIA,EADM,gBACcC,OACpB,OAAO,EAIf,OAAO,ECNI,eAACE,GACZ,IAAIC,EADkB,EAGYC,IAAMC,SAAS,IAH3B,mBAGfC,EAHe,KAGJC,EAHI,OAIYH,IAAMC,WAJlB,mBAIfG,EAJe,KAIJC,EAJI,OAKcL,IAAMC,UAAS,GAL7B,mBAKfK,EALe,KAKHC,EALG,KAOhBC,EAAW,WACbH,EAAaN,EAAOU,SAuBxB,OAAO,6BACH,yDACA,wGAGA,4BACI,mGACA,uFACA,wFACA,gLAIA,8GACmF,6BAC/E,4CACA,wFAGA,0GAGR,wDACA,2BAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OA3CfC,EA2C+BD,EAAEE,OAAOC,MAAM,IA1C5DhB,EAAS,IAAIiB,YACNC,UAAYT,OACnBT,EAAOmB,WAAWL,GAHL,IAACA,KA6Cd,4BAAQM,QAvCQ,WAChBC,IAAMC,YAAYjB,GAAW,SAACkB,EAAKC,GAC3BD,EACAE,QAAQC,IAAIH,IAGhBf,GAAc,GDbnB,SAASmB,EAAeC,EAAMC,EAAYC,EAAOC,GACpD,IAAeC,EAGf,IAHeA,EAGLJ,aAHqC/B,UAAamC,aAAmBC,OAM3E,IAFA,IAAMC,EAAO,GAEb,MAAkBrC,OAAOC,KAAK8B,GAA9B,eAAqC,CAAhC,IAAMO,EAAG,KACJC,EAAOP,EAAa,MAAQM,EAE9BD,EAAKG,SAAST,EAAKO,KAAS3C,EAAY2C,GACxCJ,EAAKO,KAAK,CAACF,OAAMG,IAAKX,EAAKO,KAE3BD,EAAKI,KAAKV,EAAKO,IAGnBR,EAAeC,EAAKO,GAAMC,EAAMN,EAAM,EAAGC,QAE1C,GAhBO,SAACC,GAAD,OAAcA,aAAmBnC,QAAYmC,aAAmBC,MAgBnEO,CAAMZ,GAAO,CACpB,IAAMM,EAAO,GAEb,IAAK,IAAMO,KAASb,EAAM,CACtB,IAAMc,EAAed,EAAKa,GAE1B,GAAI9C,EAAe+C,GACf,cAAkB7C,OAAOC,KAAK4C,GAA9B,eAA6C,CAAxC,IAAMP,EAAG,KACJC,EAAOP,EAAa,MAAQM,EAE9BD,EAAKG,SAASK,EAAaP,KAAS3C,EAAY2C,GAChDJ,EAAKO,KAAK,CAACF,OAAMG,IAAKG,EAAaP,KAEnCD,EAAKI,KAAKI,EAAaP,SAI/BR,EAAeC,EAAKa,GAAN,UAAiBZ,EAAjB,YAA+BY,EAA/B,KAAyCX,EAAM,EAAGC,KCrBpEY,CAAoBnB,EAAOoB,QAAS,UAAW,EAAGzC,GAElDC,EAAa,YAAID,IACjBK,GAAc,SA6BlB,YAEA,iCACI,6BAAMD,GAAc,iBACpB,+BACI,+BACI,4BAAI,oCAAa,uCAErB,+BAEIJ,EAAU0C,KAAI,SAAChC,EAAGiC,GAAJ,OAAU,wBAAIX,IAAKW,GAC7B,4BAAKjC,EAAEuB,MACP,4BAAKvB,EAAE0B,cCjEhBQ,MAJf,WACE,OAAO,kBAACC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1D,MACvB,2DCZN2D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.1b79eab9.chunk.js","sourcesContent":["function keyEndsInId(name) {\n    return name.match(/id$/i)\n}\n\nfunction noInnerObjects(obj) {\n    for (const key of Object.keys(obj)) {\n        if (obj[key] instanceof Object) {\n            return false\n        }\n    }\n\n    return true\n}\n\n//TODO: return list concatenations rather than in-place push\nexport function findDuplicates(node, parentPath, level, list) {\n    const isObj = (element) => (element instanceof Object) && !(element instanceof Array)\n    const isArr = (element) => (element instanceof Object) && (element instanceof Array)\n\n    if (isObj(node)) {\n        const vals = []\n\n        for (const key of Object.keys(node)) {\n            const path = parentPath + \" > \" + key\n\n            if (vals.includes(node[key]) && keyEndsInId(key)) {\n                list.push({path, val: node[key]})\n            } else {\n                vals.push(node[key])\n            }\n\n            findDuplicates(node[key], path, level+1, list)\n        }\n    } else if (isArr(node)) {\n        const vals = []\n\n        for (const index in node) {\n            const arrayElement = node[index]\n            \n            if (noInnerObjects(arrayElement)) {\n                for (const key of Object.keys(arrayElement)) {\n                    const path = parentPath + \" > \" + key\n\n                    if (vals.includes(arrayElement[key]) && keyEndsInId(key)) {\n                        list.push({path, val: arrayElement[key]})\n                    } else {\n                        vals.push(arrayElement[key])\n                    }\n                }\n            } else {\n                findDuplicates(node[index], `${parentPath}[${index}]`, level+1, list)\n            }\n        }\n    }\n}\n\n","import React from 'react'\nimport XmlJs from 'xml2js'\n\nimport * as Algs from './algs'\n\nexport default (props) => {    \n    let reader\n    \n    const [stateList, setStateList] = React.useState([])\n    const [stateFile, setStateFile] = React.useState()\n    const [processing, setProcessing] = React.useState(false)\n    \n    const readFile = () => {\n        setStateFile(reader.result)\n    }\n\n    const loadFile = (file) => {\n        reader = new FileReader()\n        reader.onloadend = readFile\n        reader.readAsText(file)\n    }\n\n    const processFile = () => {                           \n        XmlJs.parseString(stateFile, (err, parsed) => {\n            if (err) {\n                console.log(err)\n                return\n            }\n            setProcessing(true)\n            Algs.findDuplicates(parsed.Ableton, \"Ableton\", 0, stateList)\n            //TODO: find a better way to render this list from the algorithm itself\n            setStateList([...stateList])\n            setProcessing(false)\n        });                         \n    }\n    \n    return <div>\n        <h1>Ableton Corrupted Ids Fix</h1>\n        <p>\n            To get started using this tool, you will need to do some tasks beforehand\n        </p>\n        <ol>\n            <li>Make a copy of .als file and rename it, appending \".zip\" to the end</li>\n            <li>Unzip the new .zip file to get an uncompressed ALS file</li>\n            <li>This is actually an XML file now, so upload the XML here</li>\n            <li>\n                Once you click \"Get List\", you will see a list of all the keys in your XML where there \n                are duplicate nodes that have their keys ending with \"id\"\n            </li>\n            <li>\n                Use the error message from Ableton to help find the right duplicates to remove <br/>\n                <em>for example:</em>\n                <pre>\n                    The document \"______\" is corrupt. (Non-unique Note ids)\n                </pre>\n                <em>This means that you should look for keys with duplicate \"Note Id\" values</em>\n            </li>\n        </ol>\n        <div>Import your project XML</div>\n        <input type=\"file\" onChange={(e) => loadFile(e.target.files[0])}/>        \n\n        <button onClick={processFile}>Get List</button>\n        \n        <section>\n            <div>{processing && \"processing...\"}</div>\n            <table>\n                <thead>\n                    <tr><td>PATH</td><td>VALUE</td></tr>                    \n                </thead>\n                <tbody>\n                {\n                    stateList.map((e, i) => <tr key={i}>\n                        <td>{e.path}</td>\n                        <td>{e.val}</td>\n                    </tr>)\n                }\n                </tbody>            \n            </table>\n        </section>        \n    </div>\n}","import React from 'react';\nimport './App.css';\nimport MainUI from './MainUI.jsx'\n\nfunction App() {\n  return <MainUI />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}