{"version":3,"sources":["MainUI.jsx","algs.js","App.js","serviceWorker.js","index.js"],"names":["reader","React","useState","resultList","setResultList","stateFile","setStateFile","processing","setProcessing","outputJson","setOutputJson","readFile","result","loadFile","file","FileReader","onloadend","readAsText","processFile","a","parsed","JSON","parse","list","res","Algs","Ableton","paths","map","e","path","i","query","split","test","it","join","thing","eval","stringify","href","type","onChange","target","files","onClick","readOnly","rows","cols","value","key","val","keyEndsInId","name","match","noInnerObjects","obj","Object","keys","findDuplicates","node","parentPath","level","element","Array","vals","includes","push","isArr","index","arrayElement","App","MainUI","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26e3c52e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport * as Algs from './algs'\r\n\r\nexport default () => {\r\n    let reader\r\n    \r\n    const [resultList, setResultList] = React.useState([])\r\n    const [stateFile, setStateFile] = React.useState()\r\n    const [processing, setProcessing] = React.useState(false)\r\n    const [outputJson, setOutputJson] = React.useState('')    \r\n\r\n    const readFile = () => {\r\n        setStateFile(reader.result)\r\n    }\r\n\r\n    const loadFile = (file) => {\r\n        reader = new FileReader()\r\n        reader.onloadend = readFile\r\n        reader.readAsText(file)\r\n    }\r\n\r\n    const processFile = async () => {\r\n        setProcessing(true)\r\n        const parsed = JSON.parse(stateFile)\r\n        const list = []        \r\n        const res = Algs.findDuplicates(parsed.Ableton, \"Ableton\", 0, list)\r\n\r\n        setResultList([...res])\r\n\r\n        const paths = res.map((e) => e.path)\r\n        let i = 0\r\n        for (const path of paths) {\r\n            let query = \"parsed\"\r\n            query += path.split('.').map((e) => {\r\n                if (/\\[\\d+\\]$/gim.test(e)) {\r\n                    let it = e.split('[')\r\n                    return `['${it[0]}'][${it[1]}`\r\n                } else {\r\n                    return `['${e}']`\r\n                }\r\n            }).join('')                \r\n\r\n            let thing = `if(${query}) {            \r\n                ${query} = \"${9999999+(i++)}\"\r\n            }`\r\n            \r\n            eval(thing)            \r\n        }\r\n        \r\n        setOutputJson(JSON.stringify(parsed))\r\n        \r\n        setProcessing(false)        \r\n    }\r\n    \r\n    return <div>\r\n        <h1>Ableton Corrupted Ids Fix</h1>\r\n        <p>\r\n            To get started using this tool, you will need to do some tasks beforehand\r\n        </p>\r\n        <ol>\r\n            <li>Make a copy of .als file and rename it, appending \".zip\" to the end</li>\r\n            <li>Unzip the new .zip file to get an uncompressed ALS file</li>\r\n            <li>This is actually an XML file now, so upload the XML to <a href=\"https://www.convertjson.com/xml-to-json.htm\">this site here</a></li>\r\n            <li>This will convert to a JSON file; download it and upload here</li>\r\n            <li>Click \"Get New JSON\" to get the text for the new JSON with duplicate keys renamed</li>\r\n            <li>Copy/Paste the new JSON text to <a href=\"https://www.convertjson.com/json-to-xml.htm\">this sibling site</a> to get XML back</li>\r\n            <li>Be patient as it may take a long time to copy/paste long text</li>\r\n            <li>Download result as XML, and then rename to \".als\"; it should open in Ableton</li>\r\n            <li>\r\n                DISCLAIMER: this project is still being optimised. I am not liable for any damage done to your original file.\r\n                This is why step 1 is absolutely crucial. You should still send your file to Ableton support to see if they can fix it.\r\n                They will definitely do a much better job than this tool.\r\n            </li>\r\n        </ol>\r\n        <div>Import your project JSON</div>\r\n        <input type=\"file\" onChange={(e) => loadFile(e.target.files[0])}/>\r\n\r\n        <button onClick={processFile}>Get New JSON</button>\r\n        \r\n        <section>\r\n        { processing ? <div>Processing...</div> : null }\r\n        </section>\r\n        <section>\r\n            {<textarea readOnly rows={24} cols={80} value={outputJson}/>}\r\n            <table>\r\n                <thead>\r\n                    <tr><td>PATH</td><td>VALUE</td></tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                resultList.map((e,i) => <tr key={\"tr\"+i}>            \r\n                    <td>{e.path}</td><td>{e.val}</td>\r\n                </tr>)\r\n                }\r\n                </tbody>            \r\n            </table>\r\n        </section>\r\n    </div>\r\n}","function keyEndsInId(name) {\r\n    return name.match(/id$/i)\r\n}\r\n\r\nfunction noInnerObjects(obj) {\r\n    for (const key of Object.keys(obj)) {\r\n        if (obj[key] instanceof Object) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nexport function findDuplicates(node, parentPath, level, list) {\r\n    const isObj = (element) => (element instanceof Object) && !(element instanceof Array)\r\n    const isArr = (element) => (element instanceof Object) && (element instanceof Array)\r\n        \r\n    if (isObj(node)) {\r\n        const vals = []\r\n\r\n        for (const key of Object.keys(node)) {\r\n            const path = parentPath + \".\" + key\r\n\r\n            if (vals.includes(node[key]) && keyEndsInId(key)) {\r\n                list.push({path, val: node[key]})\r\n            } else {\r\n                vals.push(node[key])\r\n            }\r\n\r\n            findDuplicates(node[key], path, level+1, list)\r\n        }\r\n    } else if (isArr(node)) {\r\n        const vals = []\r\n\r\n        for (const index in node) {\r\n            const arrayElement = node[index]\r\n            \r\n            if (noInnerObjects(arrayElement)) {\r\n                for (const key of Object.keys(arrayElement)) {\r\n                    const path = parentPath + `[${index}].${key}`\r\n\r\n                    if (vals.includes(arrayElement[key]) && keyEndsInId(key)) {                        \r\n                        list.push({path, val: arrayElement[key]})\r\n                    } else {\r\n                        vals.push(arrayElement[key])\r\n                    }\r\n                }\r\n            } else {\r\n                findDuplicates(node[index], `${parentPath}[${index}]`, level+1, list)\r\n            }\r\n        }     \r\n    }\r\n\r\n    return list\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport MainUI from './MainUI.jsx'\r\n\r\nfunction App() {\r\n  return <MainUI />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}